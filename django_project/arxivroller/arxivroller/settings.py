"""
Django settings for arxivroller project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open(BASE_DIR / 'credential' / 'secret_key', 'r') as f:
    SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

if not DEBUG:
    ALLOWED_HOSTS = ['127.0.0.1',
                    '34.71.4.3',
                    'localhost',
                    'www.jhaoming.com',
                    'arxiv.jhaoming.com',
                    'www.gtflashlab.com',
                    'arxiv.gtflashlab.com',
                    ]
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False


# Application definition

INSTALLED_APPS = [
    'webapp.apps.WebappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'compressor',
    'rest_framework',
    'django_registration',
    'django_extensions',
    'whitenoise.runserver_nostatic',
    'dbbackup',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'arxivroller.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arxivroller.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
with open(BASE_DIR / 'credential' / 'db.json', 'r') as f:
    DATABASES_CRED = json.load(f)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'arxivroller_db',
        'USER': DATABASES_CRED['user'],
        'PASSWORD': DATABASES_CRED['pwd'],
        'HOST': '127.0.0.1',
        'PORT': '',
    }
}

# Backup (Local)
# DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
# DBBACKUP_CLEANUP_KEEP = 1
# DBBACKUP_STORAGE_OPTIONS = {'location': '/mnt/db_backup'}
# Backup (Dropbox)
with open(BASE_DIR / 'credential' / 'dropbox.json', 'r') as f:
    DROPBOX_CRED = json.load(f)
DBBACKUP_STORAGE = 'storages.backends.dropbox.DropBoxStorage'
DBBACKUP_CLEANUP_KEEP = 1
DBBACKUP_STORAGE_OPTIONS = {
    'oauth2_access_token': DROPBOX_CRED['oauth2_access_token'],
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "site_static"
STATICFILES_DIRS = [BASE_DIR / 'static']
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# Sass config
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)
COMPRESS_OFFLINE = True
LIBSASS_OUTPUT_STYLE = 'compressed'
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Account Settings
# LOGOUT_REDIRECT_URL = '/'

# EMAIL BACKEND settings
# EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
# EMAIL_FILE_PATH = str(BASE_DIR.joinpath('sent_emails'))
with open(BASE_DIR / 'credential' / 'email.json', 'r') as f:
    EMAIL_CRED = json.load(f)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = EMAIL_CRED['host']
EMAIL_PORT = EMAIL_CRED['port']
EMAIL_USE_TLS = EMAIL_CRED['use_tls']
EMAIL_HOST_USER = EMAIL_CRED['user']
EMAIL_HOST_PASSWORD = EMAIL_CRED['pwd']

# REST framework
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

# Arxivroller Options
PAPERS_MACHINE_LEARNING_CATEGORIES = ["cs.CL", "cs.LG", "cs.CV", "cs.AI", "cs.IR", "cs.DC", "cs.HC", "cs.NE", "stat.ML","math.OC"]
with open(BASE_DIR / 'static' / 'Arxiv_ALL_SUBJECTS.txt', 'r') as f:
    ALL_CATEGORIES = [l.strip() for l in f]

# Semantic Scholar
try:
    with open(BASE_DIR / 'credential' / 's2.json', 'r') as f:
        SEMANTIC_SCHOLAR_CRED = json.load(f)
        SEMANTIC_SCHOLAR_KEY = SEMANTIC_SCHOLAR_CRED['x-api-key']
        SEMANTIC_SCHOLAR_URL = SEMANTIC_SCHOLAR_CRED['url']
except:
    SEMANTIC_SCHOLAR_KEY = None
    SEMANTIC_SCHOLAR_URL = "https://api.semanticscholar.org"